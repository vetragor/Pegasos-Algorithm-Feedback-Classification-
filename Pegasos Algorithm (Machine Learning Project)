import csv
import numpy as np
import matplotlib.pyplot as plt
import sys
from string import punctuation, digits
import random




if sys.version_info[0] < 3:
    PYTHON3 = False
else:
    PYTHON3 = True


def accuracy(preds, targets):
    """
        Given length-N vectors containing predicted and target labels,
        returns the ratio and number of correct predictions.
        """
    return (preds == targets).mean()

def get_order(n_samples):
    """ the ordering to iterate the feature matrix in each iteration randomly.
        """

    try:
        with open(str(n_samples) + '.txt') as fp:
            line = fp.readline()
            return list(map(int, line.split(',')))
    except FileNotFoundError:
        random.seed(1)
        indices = list(range(n_samples))
        random.shuffle(indices)
        return indices


def load_data(path_data, extras=False):
    """
        Returns a list of dict with keys:
        * sentiment: +1 or -1 if the review was positive or negative, respectively
        * text: the text of the review

        Additionally, if the `extras` argument is True, each dict will also include the
        following information:
        * productId: a string that uniquely identifies each product
        * userId: a string that uniquely identifies each user
        * summary: the title of the review
        * helpfulY: the number of users who thought this review was helpful
        * helpfulN: the number of users who thought this review was NOT helpful
        """
    global PYTHON3

    basic_fields = {'sentiment', 'text'}
    numeric_fields = {'sentiment', 'helpfulY', 'helpfulN'}

    data = []
    if PYTHON3:
        f_data = open(path_data, encoding="latin1")
    else:
        f_data = open(path_data)

    for datum in csv.DictReader(f_data, delimiter='\t'):
        for field in list(datum.keys()):
            if not extras and field not in basic_fields:
                del datum[field]
            elif field in numeric_fields and datum[field]:
                datum[field] = int(datum[field])

        data.append(datum)

    f_data.close()

    return data



def extract_words(input_string):
    """
        Helper function for bag_of_words()
        Inputs a text string
        Returns a list of lowercase words in the string.
        Punctuation and digits are separated out into their own words.
        """
    for c in punctuation + digits:
        input_string = input_string.replace(c, ' ' + c + ' ')

    return input_string.lower().split()



def bag_of_words(texts):
    """
        Inputs a list of string reviews
        Returns a dictionary of unique unigrams occurring over the input


        """

    dictionary = {}  # maps word to unique index
    for text in texts:
        text = str(text)
        word_list = extract_words(text)

        for word in word_list:
            if word not in dictionary:
                dictionary[word] = len(dictionary)
    return dictionary



def extract_bow_feature_vectors(reviews, dictionary):
    """
        Inputs a list of string reviews
        Inputs the dictionary of words as given by bag_of_words
        Returns the bag-of-words feature matrix representation of the data.
        The returned matrix is of shape (n, m), where n is the number of reviews
        and m the total number of entries in the dictionary.


        """

    num_reviews = len(reviews)
    feature_matrix = np.zeros([num_reviews, len(dictionary)])

    for i, text in enumerate(reviews):
        text = str(text)
        word_list = extract_words(text)
        for word in word_list:
            if word in dictionary:
                feature_matrix[i, dictionary[word]] = 1
    return feature_matrix



def pegasos_single_step_update(
        feature_vector,
        label,
        L,
        eta,
        current_theta,
        current_theta_0):
    """
        Properly updates the classification parameter, theta and theta_0, on a
        single step of the Pegasos algorithm

        Args:
            feature_vector - A numpy array describing a single data point.
            label - The correct classification of the feature vector.
            L - The lamba value being used to update the parameters.
            eta - Learning rate to update parameters.
            current_theta - The current theta being used by the Pegasos
                algorithm before this update.
            current_theta_0 - The current theta_0 being used by the
                Pegasos algorithm before this update.

        Returns: A tuple where the first element is a numpy array with the value of
        theta after the current update has completed and the second element is a
        real valued number with the value of theta_0 after the current updated has
        completed.
        """
    if (label * (np.dot(current_theta, feature_vector) + current_theta_0)) <= 1:
        current_theta = (1 - L * eta) * current_theta + eta * label * feature_vector
        current_theta_0 = eta * label + current_theta_0
    else:
        current_theta = (1 - L * eta) * current_theta

    return (current_theta, current_theta_0)
    raise NotImplementedError


def pegasos(feature_matrix, labels, T, L):
    """
        Runs the Pegasos algorithm on a given set of data. Runs T
        iterations through the data set, there is no need to worry about
        stopping early.

        For each update, set learning rate = 1/sqrt(t),
        where t is a counter for the number of updates performed so far (between 1
        and nT inclusive).

        NOTE: Please use the previously implemented functions when applicable.
        Do not copy paste code from previous parts.

        Args:
            feature_matrix - A numpy matrix describing the given data. Each row
                represents a single data point.
            labels - A numpy array where the kth element of the array is the
                correct classification of the kth row of the feature matrix.
            T - An integer indicating how many times the algorithm
                should iterate through the feature matrix.
            L - The lamba value being used to update the Pegasos
                algorithm parameters.

        Returns: A tuple where the first element is a numpy array with the value of
        the theta, the linear classification parameter, found after T
        iterations through the feature matrix and the second element is a real
        number with the value of the theta_0, the offset classification
        parameter, found after T iterations through the feature matrix.
        """

    current_theta_0 = 0.0
    (nsamples, nfeatures) = feature_matrix.shape
    current_theta = np.zeros(nfeatures)
    eta = 1
    t = 1
    for a in range(T):
        for i in get_order(feature_matrix.shape[0]):
            current_theta, current_theta_0 = pegasos_single_step_update(feature_matrix[i], labels[i], L, eta,
                                                                        current_theta, current_theta_0)
            t += 1
            eta = 1 / (t ** 0.5)

    #print(current_theta, current_theta_0)
    return (current_theta, current_theta_0)



def classify(feature_matrix, theta, theta_0):
    """
        A classification function that uses theta and theta_0 to classify a set of
        data points.

        Args:
            feature_matrix - A numpy matrix describing the given data. Each row
                represents a single data point.
                    theta - A numpy array describing the linear classifier.
            theta - A numpy array describing the linear classifier.
            theta_0 - A real valued number representing the offset parameter.

        Returns: A numpy array of 1s and -1s where the kth element of the array is
        the predicted classification of the kth row of the feature matrix using the
        given theta and theta_0. If a prediction is GREATER THAN zero, it should
        be considered a positive classification.
        """

    (nsamples, nfeatures) = feature_matrix.shape
    classifier_array = np.zeros(nsamples)

    for i in range(nsamples):
        feature_array = feature_matrix[i]
        val = np.dot(feature_array, theta) + theta_0

        if val > 0:
            classifier_array[i] = 1

        else:
            classifier_array[i] = -1

    return classifier_array


def classifier_accuracy(
        train_feature_matrix,
        val_feature_matrix,
        train_labels,
        val_labels,
        T, L):
    """
        Trains a linear classifier and computes accuracy.
        The classifier is trained on the train data. The classifier's
        accuracy on the train and validation data is then returned.

        Args:
            classifier - A classifier function that takes arguments
                (feature matrix, labels, **kwargs) and returns (theta, theta_0)
            train_feature_matrix - A numpy matrix describing the training
                data. Each row represents a single data point.
            val_feature_matrix - A numpy matrix describing the training
                data. Each row represents a single data point.
            train_labels - A numpy array where the kth element of the array
                is the correct classification of the kth row of the training
                feature matrix.
            val_labels - A numpy array where the kth element of the array
                is the correct classification of the kth row of the validation
                feature matrix.
            **kwargs - Additional named arguments to pass to the classifier
                (e.g. T or L)

        Returns: A tuple in which the first element is the (scalar) accuracy of the
        trained classifier on the training data and the second element is the
        accuracy of the trained classifier on the validation data.
        """

    current_theta, current_theta_0 = pegasos(feature_matrix, labels, T, L)
    classification_array = classify(train_feature_matrix, current_theta, current_theta_0)
    train_accur = accuracy(train_labels, classification_array)

    classification_array1 = classify(val_feature_matrix, current_theta, current_theta_0)

    val_accur = accuracy(classification_array1, val_labels)

    return train_accur, val_accur





data = load_data('reviews_train.tsv', extras=False)

labels = []
feedbacks = []
for i in data:
    labels.append(i['sentiment'])
    feedbacks.append(i['text'])


lexicon = bag_of_words(feedbacks)

feature_matrix = extract_bow_feature_vectors(feedbacks, lexicon)
T = 80
L = 0.001

test_data = load_data('reviews_val.tsv', extras=False)
test_labels = []
test_feedbacks = []

for a in test_data:
    test_labels.append(a['sentiment'])
    test_feedbacks.append(a['text'])

lexicon_test = bag_of_words(test_feedbacks)
feature_matrix_test = extract_bow_feature_vectors(test_feedbacks, lexicon)
print(len(lexicon_test))
training_accuracy, val_accuracy = classifier_accuracy(feature_matrix, feature_matrix_test, labels, test_labels, T, L)

print(training_accuracy, val_accuracy)
